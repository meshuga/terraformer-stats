{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","App","state","stats","get","response","this","setState","data","versions","forEach","elem","map","totalCount","assets","asset","key","name","split","length","stat","download_count","push","tag_name","published_at","className","id","width","height","margin","top","right","left","bottom","dataKey","strokeDasharray","type","stroke","activeDot","r","href","version","Date","parse","toDateString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WAKAA,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,mB,IAiG/BC,E,2MA9FbC,MAAQ,CACNC,MAAO,I,mNAIcN,IAAMO,IAAI,yE,OAA3BC,E,OACJC,KAAKC,SAAS,CACZJ,MAAOE,EAASG,O,qIAIV,IACAL,EAAUG,KAAKJ,MAAfC,MAEJM,EAAW,GA2Bf,OAzBAN,EAAMO,SAAQ,SAAAC,GACZ,IAAMC,EAAM,GACRC,EAAa,EACjBF,EAAKG,OAAOJ,SAAQ,SAAAK,GAClB,IAAIC,EAAM,MAC2B,IAAjCD,EAAME,KAAKC,MAAM,KAAKC,SACxBH,EAAMD,EAAME,KAAKC,MAAM,KAAK,IAE9B,IAAME,EAAOR,EAAII,GAIfJ,EAAII,GAHDI,EAGQA,EAAOL,EAAMM,eAFbN,EAAMM,eAInBR,GAAcE,EAAMM,kBAGtBZ,EAASa,KAAK,CACZL,KAAMN,EAAKY,SACXC,aAAcb,EAAKa,aACnBV,OAAQF,EACRC,WAAYA,OAKd,yBAAKY,UAAU,OACb,gCACE,2DAIF,0BAAMC,GAAG,aACP,kBAAC,IAAD,CAAWC,MAAO,KAAMC,OAAQ,IAAKpB,KAAMC,EACzCoB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/C,kBAAC,IAAD,CAAOhB,KAAK,UAAUiB,QAAQ,SAC9B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMC,KAAK,WAAWnB,KAAK,MAAMiB,QAAQ,aAAaG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACvF,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,MAAMiB,QAAQ,aAAaG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACvF,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,SAASiB,QAAQ,gBAAgBG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KAC7F,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,QAAQiB,QAAQ,eAAeG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KAC3F,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,aAAaiB,QAAQ,oBAAoBG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACrG,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,WAAWiB,QAAQ,kBAAkBG,OAAO,UAAUC,UAAW,CAAEC,EAAG,KACjG,kBAAC,IAAD,CAAMH,KAAK,WAAWnB,KAAK,cAAciB,QAAQ,aAAaG,OAAO,UAAUC,UAAW,CAAEC,EAAG,MAEjG,sCACA,8DAAmC,uBAAGC,KAAK,sDAAR,eAAnC,sKACA,4BACE,2EACA,kGACA,wGAEF,+CACA,+BACE,4BACE,uCACA,6CAGA/B,EAASG,KAAI,SAAA6B,GACX,OAAQ,4BACN,4BAAKA,EAAQxB,MACb,4BAAK,IAAIyB,KAAKA,KAAKC,MAAMF,EAAQjB,eAAeoB,qBAKxD,sCACA,uBAAGJ,KAAK,yEAAR,+E,GAxFQK,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c715fe0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nclass App extends React.Component {\n  state = {\n    stats: []\n  };\n\n  async componentDidMount() {\n    var response = await axios.get(\"https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases\");\n    this.setState({\n      stats: response.data\n    })\n  }\n\n  render() {\n    const { stats } = this.state;\n\n    var versions = [];\n\n    stats.forEach(elem => {\n      const map = {};\n      var totalCount = 0;\n      elem.assets.forEach(asset => {\n        var key = \"all\";\n        if (asset.name.split(\"-\").length === 4) {\n          key = asset.name.split(\"-\")[1];\n        }\n        const stat = map[key];\n        if (!stat) {\n          map[key] = asset.download_count;\n        } else {\n          map[key] = stat + asset.download_count;\n        }\n        totalCount += asset.download_count;\n      })\n\n      versions.push({\n        name: elem.tag_name,\n        published_at: elem.published_at,\n        assets: map,\n        totalCount: totalCount,\n      });\n\n    });\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>\n            Terraformer download stats\n          </h1>\n        </header>\n        <main id=\"container\">\n          <LineChart width={1200} height={500} data={versions}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis name=\"Version\" dataKey=\"name\" />\n            <YAxis />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" name=\"Sum\" dataKey=\"totalCount\" stroke=\"#000000\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"AWS\" dataKey=\"assets.aws\" stroke=\"#F7832A\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Google\" dataKey=\"assets.google\" stroke=\"#E5B832\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Azure\" dataKey=\"assets.azure\" stroke=\"#3BB8CE\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Kubernetes\" dataKey=\"assets.kubernetes\" stroke=\"#615CD1\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"AliCloud\" dataKey=\"assets.alicloud\" stroke=\"#ACACAC\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Cross cloud\" dataKey=\"assets.all\" stroke=\"#2284d8\" activeDot={{ r: 8 }} />\n          </LineChart>\n          <h3>Legend</h3>\n          <p>Diagram shows download stats of <a href=\"https://github.com/GoogleCloudPlatform/terraformer\">Terraformer</a> tool across releases. Each release starting from version 0.8.4 provides separate builds per Terraform provider which can give some insight into cloud popularity.</p>\n          <ul>\n            <li>Sum - total number of downloads of the tool</li>\n            <li>Cross cloud - total number of downloads of the tool for all clouds</li>\n            <li>_Provider_ - total number of downloads of the tool for a given provider</li>\n          </ul>\n          <h3>Version details</h3>\n          <table>\n            <tr>\n              <th>Version</th>\n              <th>Release date</th>\n            </tr>\n            {\n              versions.map(version => {\n                return (<tr>\n                  <td>{version.name}</td>\n                  <td>{new Date(Date.parse(version.published_at)).toDateString()}</td>\n                </tr>)\n              })\n            }\n          </table>\n          <h3>Source</h3>\n          <a href=\"https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases\">https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases</a>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}