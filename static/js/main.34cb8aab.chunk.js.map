{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","App","state","stats","get","response","this","setState","data","versions","releases","forEach","elem","map","totalCount","assets","asset","key","name","split","length","stat","download_count","push","tag_name","published_at","i","diffTime","Math","abs","Date","parse","diffDays","ceil","version","Object","keys","release","undefined","columns","Header","accessor","charAt","toUpperCase","slice","className","id","width","height","margin","top","right","left","bottom","dataKey","strokeDasharray","type","stroke","activeDot","r","href","useTable","useSortBy","getTableProps","headerGroups","rows","prepareRow","TableHead","headerGroup","TableRow","getHeaderGroupProps","column","TableCell","getSortByToggleProps","render","isSorted","isSortedDesc","TableBody","row","getRowProps","cells","cell","getCellProps","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34cb8aab.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { useTable, useSortBy } from \"react-table\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nclass App extends React.Component {\n  state = {\n    stats: []\n  };\n\n  async componentDidMount() {\n    var response = await axios.get(\"https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases\");\n    this.setState({\n      stats: response.data\n    })\n  }\n\n  render() {\n    const { stats } = this.state;\n\n    var versions = [];\n\n    const releases = {};\n\n    stats.forEach(elem => {\n      const map = {};\n      var totalCount = 0;\n      elem.assets.forEach(asset => {\n        var key = \"all\";\n        if (asset.name.split(\"-\").length === 4) {\n          key = asset.name.split(\"-\")[1];\n        }\n        const stat = map[key];\n        if (!stat) {\n          map[key] = asset.download_count;\n        } else {\n          map[key] = stat + asset.download_count;\n        }\n        releases[key] = true;\n        totalCount += asset.download_count;\n      })\n\n      versions.push({\n        name: elem.tag_name,\n        published_at: elem.published_at,\n        assets: map,\n        totalCount: totalCount,\n      });\n\n    });\n    for(var i = 0; i < versions.length; i++) {\n      var diffTime;\n      if(i == 0) {\n        diffTime = Math.abs(new Date() - new Date(Date.parse(versions[i].published_at)));\n      } else {\n        diffTime = Math.abs(new Date(Date.parse(versions[i-1].published_at)) - new Date(Date.parse(versions[i].published_at)));\n      }\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      versions[i].diffDays = diffDays;\n    }\n\n    versions.forEach(version => {\n      version.totalCount = Math.ceil(version.totalCount/version.diffDays*10)/10;\n      Object.keys(releases).forEach(release => {\n        if (version.assets[release] !== undefined) {\n          version.assets[release] = Math.ceil(version.assets[release]/version.diffDays*10)/10;\n        } else {\n          version.assets[release] = 0;\n        }\n      })\n    });\n    const columns = [\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Total count\",\n        accessor: \"totalCount\"\n      },\n      {\n        Header: \"Published at\",\n        accessor: \"published_at\"\n      },\n      {\n        Header: \"Latest version for [days]\",\n        accessor: \"diffDays\"\n      }\n    ];\n    Object.keys(releases).forEach(elem => {\n      columns.push({\n        Header: elem.charAt(0).toUpperCase() + elem.slice(1),\n        accessor: \"assets.\"+elem\n      })\n    })\n    \n    const Table = ({ columns, data }) => {\n      const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n        columns,\n        data\n      }, useSortBy);\n    \n      return (\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map(headerGroup => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <TableCell {...column.getSortByToggleProps()}>\n                    {column.render(\"Header\")}\n                    <span>\n                      {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½ \" : \" ðŸ”¼ \") : \" ðŸ”½ðŸ”¼\"}\n                    </span>\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <TableCell {...cell.getCellProps()}>\n                        {cell.render(\"Cell\")}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      );\n    };\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>\n            Terraformer daily downloads\n          </h1>\n        </header>\n        <main id=\"container\">\n          <LineChart width={1200} height={500} data={versions}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis name=\"Version\" dataKey=\"name\" />\n            <YAxis />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" name=\"AWS\" dataKey=\"assets.aws\" stroke=\"#F7832A\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Google\" dataKey=\"assets.google\" stroke=\"#E5B832\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Azure\" dataKey=\"assets.azure\" stroke=\"#3BB8CE\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Kubernetes\" dataKey=\"assets.kubernetes\" stroke=\"#615CD1\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"AliCloud\" dataKey=\"assets.alicloud\" stroke=\"#ACACAC\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" name=\"Cross cloud\" dataKey=\"assets.all\" stroke=\"#2284d8\" activeDot={{ r: 8 }} />\n          </LineChart>\n          <h3>Legend</h3>\n          <p>Diagram shows daily download stats of <a href=\"https://github.com/GoogleCloudPlatform/terraformer\">Terraformer</a> tool across releases. Each release starting from version 0.8.4 provides separate builds per Terraform provider which can give some insight into cloud popularity.</p>\n          <ul>\n            <li>Sum - total daily number of downloads of the tool</li>\n            <li>Cross cloud - total daily number of downloads of the tool for all clouds</li>\n            <li>_Provider_ - total daily number of downloads of the tool for a given provider</li>\n          </ul>\n          <h3>Download list</h3>\n          <Table columns={columns} data={versions} />\n          <h3>Source</h3>\n          <a href=\"https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases\">https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases</a>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}